{"version":3,"sources":["Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MapWrapper","styled","div","Index","aqius","numberAqius","parseInt","Conditions","StyledSearchWrapper","Frame","Map","withGoogleMap","props","options","gestureHandling","mapTypeId","streetViewControl","clickableIcons","minZoom","fullscreenControl","zoomControl","mapTypeControl","scaleControl","rotateControl","restriction","latLngBounds","north","south","west","east","defaultZoom","defaultCenter","lat","lng","center","coordinates","zoom","children","Search","React","useState","address","setAddress","highlight","setHighlight","pollutionData","setPollutionData","setCoordinates","formatedData","data","current","pollution","ts","Date","toLocaleString","timeZone","useEffect","a","async","fetch","result","json","response","console","error","fetchPolygonData","toFixed","process","method","redirect","fetchAirVisual","searchOptions","types","value","onChange","onSelect","geocodeByAddress","results","getLatLng","latLng","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","description","city","title","containerElement","mapElement","length","polygon","find","element","geojson","type","coordArr","path","strokeColor","strokeOpacity","strokeWeight","region","position","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5589262.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport { withGoogleMap, GoogleMap, Marker, Polygon } from \"react-google-maps\";\r\n\r\nconst MapWrapper = styled.div`\r\n  width: auto;\r\n  height: 100vh;\r\n`;\r\nconst Index = styled.div<{ aqius?: string }>`\r\n  background-color: ${({ aqius }) => {\r\n    if (!aqius) return \"white\";\r\n    const numberAqius = parseInt(aqius, 10);\r\n    return numberAqius < 50\r\n      ? \"green\"\r\n      : numberAqius < 100\r\n      ? \"yellow\"\r\n      : numberAqius < 150\r\n      ? \"orange\"\r\n      : numberAqius < 200\r\n      ? \"red\"\r\n      : numberAqius < 300\r\n      ? \"purple\"\r\n      : numberAqius < 500\r\n      ? \"maroon\"\r\n      : \"white\";\r\n  }};\r\n  position: absolute;\r\n  z-index: 5;\r\n  width: 15rem;\r\n  left: 4rem;\r\n  bottom: 10vh;\r\n  border-radius: 10px;\r\n  @media (max-width: 500px) {\r\n    left: 1rem;\r\n    width: 12rem;\r\n  }\r\n`;\r\nconst Conditions = styled.div`\r\n  background: linear-gradient(\r\n    to bottom,\r\n    rgba(0, 128, 0, 60%),\r\n    rgba(255, 255, 0, 60%),\r\n    rgba(255, 165, 0, 80%),\r\n    rgba(255, 0, 0, 60%),\r\n    rgba(128, 0, 128, 60%),\r\n    rgba(128, 0, 0, 80%)\r\n  );\r\n  position: absolute;\r\n  z-index: 5;\r\n  height: 100vh;\r\n  right: 0;\r\n  max-width: min-content;\r\n  box-shadow: 0 0 15px;\r\n  p {\r\n    padding: 9vh 0 0 0;\r\n    font-size: 15px;\r\n    height: 7vh;\r\n    margin: 0;\r\n    font-weight: 500;\r\n  }\r\n`;\r\n\r\nconst StyledSearchWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 5;\r\n  top: 4rem;\r\n  left: 4rem;\r\n  input {\r\n    padding: 7px 20px 7px 20px;\r\n    border-radius: 20px;\r\n    border: 1px solid;\r\n    font-size: 1rem;\r\n    @media (max-width: 400px) {\r\n      padding: 2vw;\r\n      font-size: 4.5vw;\r\n    }\r\n  }\r\n  @media (max-width: 500px) {\r\n    top: 8vh;\r\n    left: 7vw;\r\n  }\r\n`;\r\n\r\nconst Frame = styled.div`\r\n  position: absolute;\r\n  z-index: 5;\r\n  background: rgba(179, 179, 179, 50%);\r\n  width: 23rem;\r\n  height: 100vh;\r\n  box-shadow: 0 0 15px;\r\n  @media (max-width: 500px) {\r\n    background: none;\r\n    box-shadow: none;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Map = withGoogleMap(\r\n  (props: {\r\n    children: React.ReactNode;\r\n    coordinates: {\r\n      lat: number | null;\r\n      lng: number | null;\r\n    };\r\n  }) => (\r\n    <GoogleMap\r\n      options={{\r\n        gestureHandling: \"greedy\",\r\n        mapTypeId: \"hybrid\",\r\n        streetViewControl: false,\r\n        clickableIcons: false,\r\n        minZoom: 2.8,\r\n        fullscreenControl: false,\r\n        zoomControl: false,\r\n        mapTypeControl: false,\r\n        scaleControl: false,\r\n        rotateControl: false,\r\n        restriction: {\r\n          latLngBounds: {\r\n            north: 85,\r\n            south: -85,\r\n            west: -180,\r\n            east: 180,\r\n          },\r\n        },\r\n      }}\r\n      defaultZoom={2.8}\r\n      defaultCenter={{ lat: 43.71, lng: 7.26 }}\r\n      center={{\r\n        lat: props.coordinates.lat || 43.71,\r\n        lng: props.coordinates.lng || 7.26,\r\n      }}\r\n      zoom={props.coordinates.lat && props.coordinates.lng ? 10 : 2.6}\r\n    >\r\n      {props.children}\r\n    </GoogleMap>\r\n  )\r\n);\r\n\r\ninterface CoordinatesState {\r\n  lat: number | null;\r\n  lng: number | null;\r\n}\r\n\r\ninterface AirVisualPollution {\r\n  data?: {\r\n    city: string;\r\n    current?: { pollution: { aqius: string; ts: string } };\r\n  };\r\n}\r\n\r\ninterface OpenStreetMapResponseObject {\r\n  geojson: {\r\n    type: string;\r\n    coordinates: Array<Array<[number, number]>>;\r\n  };\r\n}\r\n\r\ntype OpenStreetMapResponse = OpenStreetMapResponseObject[];\r\n\r\nexport default function Search() {\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [highlight, setHighlight] = React.useState<OpenStreetMapResponse>([]);\r\n  const [\r\n    pollutionData,\r\n    setPollutionData,\r\n  ] = React.useState<AirVisualPollution | null>(null);\r\n  const [coordinates, setCoordinates] = React.useState<CoordinatesState>({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n\r\n  const formatedData = pollutionData?.data?.current?.pollution?.ts\r\n    ? new Date(\r\n        pollutionData?.data?.current?.pollution?.ts\r\n      ).toLocaleString(\"en-GB\", { timeZone: \"UTC\" })\r\n    : \"\";\r\n\r\n  const handleChange = (address: string) => {\r\n    setAddress(address);\r\n  };\r\n\r\n  const handleSelect = async (value: any) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n  };\r\n\r\n  const region = () => {\r\n    const polygon = highlight.find(\r\n      (element) =>\r\n        element && element.geojson && element.geojson.type === \"Polygon\"\r\n    );\r\n    if (!polygon) return null;\r\n    const coordArr = polygon.geojson.coordinates[0].map((data) => ({\r\n      lat: data[1],\r\n      lng: data[0],\r\n    }));\r\n\r\n    return (\r\n      <Polygon\r\n        path={coordArr}\r\n        options={{\r\n          strokeColor: \"#fc1e0d\",\r\n          strokeOpacity: 1,\r\n          strokeWeight: 2,\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchPolygonData = async () => {\r\n      try {\r\n        if (coordinates.lat === null || coordinates.lng === null || !address) {\r\n          return;\r\n        }\r\n\r\n        const result = await fetch(\r\n          `https://nominatim.openstreetmap.org/search.php?q=${address}&polygon_geojson=1&format=json`\r\n        );\r\n        const response = await result.json();\r\n\r\n        setHighlight(response);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    fetchPolygonData();\r\n  }, [coordinates]);\r\n\r\n  useEffect(() => {\r\n    const fetchAirVisual = async () => {\r\n      try {\r\n        if (coordinates.lat === null || coordinates.lng === null) {\r\n          return;\r\n        }\r\n\r\n        const result = await fetch(\r\n          `https://api.airvisual.com/v2/nearest_city?lat=${coordinates.lat.toFixed(\r\n            2\r\n          )}&lon=${coordinates.lng.toFixed(2)}&key=${\r\n            process.env.REACT_APP_AIR_VISUAL\r\n          }`,\r\n          {\r\n            method: \"GET\",\r\n            redirect: \"follow\",\r\n          }\r\n        );\r\n\r\n        const response = await result.json();\r\n        setPollutionData(response);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n\r\n    fetchAirVisual();\r\n  }, [coordinates]);\r\n\r\n  return (\r\n    <div>\r\n      <Frame></Frame>\r\n      <PlacesAutocomplete\r\n        searchOptions={{ types: [\"(cities)\"] }}\r\n        value={address}\r\n        onChange={handleChange}\r\n        onSelect={handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <StyledSearchWrapper>\r\n            <input {...getInputProps({ placeholder: \"Type address\" })} />\r\n\r\n            <div>\r\n              {loading ? <div>...loading</div> : null}\r\n\r\n              {suggestions.map((suggestion) => {\r\n                const style = {\r\n                  backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\",\r\n                };\r\n\r\n                return (\r\n                  <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                    {suggestion.description}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </StyledSearchWrapper>\r\n        )}\r\n      </PlacesAutocomplete>\r\n      <Index aqius={pollutionData?.data?.current?.pollution?.aqius}>\r\n        <p>City: {pollutionData?.data?.city}</p>\r\n        <p>\r\n          US AQI:{\" \"}\r\n          {pollutionData && pollutionData.data?.current?.pollution?.aqius}\r\n        </p>\r\n        <p>Time: {formatedData}</p>\r\n      </Index>\r\n      <Conditions>\r\n        <p title=\"Good\">Good(0 to 50)</p>\r\n        <p title=\"Moderate\">Moderate(51 to 100)</p>\r\n        <p title=\"Unhealthy for Sensitive Groups\">\r\n          Unhealthy for Sensitive Groups(101 to 150)\r\n        </p>\r\n        <p title=\"Unhealthy\">Unhealthy(151 to 200)</p>\r\n        <p title=\"Very Unhealthy\">Very Unhealthy(201 to 300)</p>\r\n        <p title=\"Hazardous\">Hazardous(301 and higher)</p>\r\n      </Conditions>\r\n      <Map\r\n        containerElement={<MapWrapper />}\r\n        mapElement={<MapWrapper />}\r\n        coordinates={coordinates}\r\n      >\r\n        {highlight.length > 1 && region()}\r\n        {coordinates.lat && coordinates.lng && (\r\n          <Marker position={{ lat: coordinates.lat, lng: coordinates.lng }} />\r\n        )}\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Search from \"./Search\";\r\n\r\nconst Wrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst App: React.FC = () => (\r\n  <Wrapper>\r\n    <Search />\r\n  </Wrapper>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}